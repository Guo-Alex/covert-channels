#!/usr/bin/env python

import subprocess
from subprocess import call
import time

data = [
    #Period, primeTime, readerWait, sendLength
    "1500000", "400000", "600000", "600000",
    "1400000", "400000", "600000", "600000",
    "1300000", "400000", "600000", "600000",
    "1200000", "400000", "600000", "600000",
    "1100000", "400000", "600000", "600000",
    "1000000", "400000", "600000", "600000",
    "900000", "400000", "500000", "500000",
    "800000", "300000", "500000", "500000",
    "700000", "300000", "400000", "400000",
    "600000", "300000", "300000", "300000",
    #"1500000", "400000", "600000", "600000",
    #"1500000", "400000", "600000", "600000",
    #"1500000", "400000", "600000", "600000",  
    #"900000", "400000", "00000", "400000",
    #"800000", "350000", "350000", "350000",
    #"750000", "350000", "350000", "350000",
    #"700000", "300000", "300000", "300000",
    #"650000", "250000", "250000", "250000",
    #"600000", "250000", "250000", "250000",
    #"550000", "225000", "225000", "225000"
    #"500000", "200000", "200000", "200000"
    #"450000", "175000", "175000", "175000",
    #"400000", "150000", "150000", "150000",
    #"350000", "125000", "125000", "125000",
    #"300000", "100000", "100000", "100000",
    #"250000", "100000", "100000", "100000"
    #"200000", "75000", "75000", "75000"
    #"150000", "50000", "50000", "50000"
    #"125000", "50000", "50000", "50000"
    #"100000", "50000", "25000", "50000"
    
    ]

if __name__ == '__main__':
	for n in range(0, 18):
	    for i in range(0, 20): #Run the test 10 times
		reader = subprocess.Popen(['taskset', '-c', '0', '../src/readerL3', data[n*4], data[(n*4)+1], data[(n*4)+2]], stdin=subprocess.PIPE, stdout=subprocess.PIPE)
		sender = subprocess.Popen(['taskset', '-c', '2', '../src/senderL3', data[n*4], data[(n*4)+1], data[(n*4)+3]], stdin=subprocess.PIPE, stdout=subprocess.PIPE)
		while True:
		    senderOutput = sender.stdout.readline() #Wait for the sender to communicate how many bits it will send
		    if senderOutput != None:
			break
		print senderOutput
		reader.stdin.write(senderOutput) #Let the reader know
		while True:
		    readerOutput = reader.stdout.readline() #Wait for the reader signal
		    if readerOutput != None:
			break
		sender.stdin.write("Start\n") #Let the sender know
		sender.wait()
		reader.wait()
		time.sleep(1)
	    call(["../src/checker"])
	    call(["rm", "-r", "../data/"])
	    call(["mkdir", "../data/"])
